buildscript {
	repositories {
		mavenCentral()
	}
}

plugins {
  id("java-library")
	id("io.micronaut.library") version "$micronautGradleVersion"
	id("io.micronaut.test-resources") version "$micronautGradleVersion"
	id('jacoco')
	id 'org.olf.dcb-bom'
	id 'service.k_int.micronaut-multi'
}

//version = "0.1"
group = "org.olf.dcb"

repositories {
	mavenCentral()
}

dependencies {
	// This should likely always be first in the annotations list
	compileOnly 'org.projectlombok:lombok'

	annotationProcessor("org.projectlombok:lombok")
	// annotationProcessor("io.micronaut:micronaut-inject")
	annotationProcessor("io.micronaut:micronaut-inject-java")
	annotationProcessor("io.micronaut.data:micronaut-data-processor")
	annotationProcessor("io.micronaut.serde:micronaut-serde-processor")
	
	annotationProcessor("io.micronaut:micronaut-http-validation")
	annotationProcessor("io.micronaut.openapi:micronaut-openapi")
	annotationProcessor("io.micronaut.security:micronaut-security-annotations")
	annotationProcessor("io.micronaut.validation:micronaut-validation-processor")
	annotationProcessor('io.micronaut:micronaut-graal')
  annotationProcessor("io.micronaut.micrometer:micronaut-micrometer-annotation")

	compileOnly("org.graalvm.nativeimage:svm")
	compileOnly("io.micronaut:micronaut-inject-java")

	// Implementation
	implementation("io.micronaut.xml:micronaut-jackson-xml")
	implementation("io.micronaut.serde:micronaut-serde-jackson")
	implementation("io.micronaut.security:micronaut-security-jwt")
	implementation("io.micronaut:micronaut-http-client")
	implementation("io.micronaut:micronaut-management")
	implementation("io.micronaut.cache:micronaut-cache-caffeine")
	//	implementation("io.micronaut.elasticsearch:micronaut-elasticsearch")
	implementation("io.micronaut.reactor:micronaut-reactor")
//	implementation('io.projectreactor.addons:reactor-extra')
	// implementation platform('io.projectreactor:reactor-bom')
	implementation 'io.projectreactor.addons:reactor-extra'
	
	implementation("io.micronaut.reactor:micronaut-reactor-http-client")
	implementation("io.swagger.core.v3:swagger-annotations")
	implementation("jakarta.annotation:jakarta.annotation-api")
	// implementation("io.micronaut:micronaut-validation")
	implementation("io.micronaut.validation:micronaut-validation")
	
	implementation("io.micronaut.elasticsearch:micronaut-elasticsearch")
	

	// implementation("org.apache.logging.log4j:log4j-api")
	// implementation("org.apache.logging.log4j:log4j-core")

	// implementation("io.micronaut:micronaut-jackson-databind") // Not using Jackson for binding.
	// implementation("io.micronaut.xml:micronaut-jackson-xml")
	implementation 'org.marc4j:marc4j'
	
  implementation 'org.opensearch.client:opensearch-java:2.21.0'
  implementation 'org.opensearch.client:opensearch-rest-client:2.19.0'
	// implementation 'org.opensearch.client:opensearch-java'
	// implementation 'org.opensearch.client:opensearch-rest-client'

	implementation("ch.qos.logback:logback-core")
	implementation("ch.qos.logback:logback-classic")

	// This is needed to address a critical CVE that blocks deployment
	implementation("io.netty:netty-handler:4.1.118.Final")

  runtimeOnly("ch.qos.logback.contrib:logback-json-classic:0.1.5")
  runtimeOnly("ch.qos.logback.contrib:logback-jackson:0.1.5")
  // runtimeOnly("ch.qos.logback.contrib:logback-json-classic:0.1.5")

  // Mostly for AWS Cloudwatch log formatting - enabled by default, see logback.xml for how to change
  // Commenting out - tests are failing and this seems to be the reason
  // implementation("io.micronaut.aws:micronaut-aws-cloudwatch-logging")

	runtimeOnly("org.slf4j:log4j-over-slf4j")

	//data
	implementation("io.micronaut.r2dbc:micronaut-r2dbc-core")
	implementation("io.micronaut.data:micronaut-data-processor")
	implementation("io.micronaut.data:micronaut-data-r2dbc")
	implementation("io.micronaut.data:micronaut-data-jdbc")
	implementation("io.micronaut.sql:micronaut-jdbc-hikari")
	// Introduced in DCB-1302 because of this issue https://github.com/micronaut-projects/micronaut-security/issues/1468
	implementation("io.micrometer:context-propagation")

  implementation("io.micronaut.problem:micronaut-problem-json")

	runtimeOnly("org.postgresql:postgresql")
	
	// Without this dependency, testcontainer injection seems not to happen at all.
	// Wonder if this is because the bean that uses PG is a r2dbc service
	runtimeOnly("org.postgresql:r2dbc-postgresql")


		// testRuntimeOnly("io.micronaut.testresources:micronaut-test-resources-client")

	// Uncommmenting this dependency results in
	// testresources Micronaut Message: Could not resolve placeholder ${auto.test.resources.r2dbc.datasources.default.options.protocol}
	//
	runtimeOnly("io.r2dbc:r2dbc-pool")

	implementation("io.micronaut.flyway:micronaut-flyway")
	runtimeOnly("org.flywaydb:flyway-database-postgresql")

        // II: These were commented out but unsure why - needed for observability on prod systems
	// Metrics (Prometheus)
	implementation "io.micronaut.micrometer:micronaut-micrometer-registry-prometheus"
	
	// Also required to enable endpoint
	implementation "io.micronaut:micronaut-management"
	
	implementation 'info.debatty:java-string-similarity'
  implementation 'com.opencsv:opencsv:5.8'
	
	implementation("jakarta.persistence:jakarta.persistence-api")

	// Tests
	testAnnotationProcessor 'org.projectlombok:lombok'
	testAnnotationProcessor "io.micronaut:micronaut-inject-java"
	testCompileOnly 'org.projectlombok:lombok'
	testCompileOnly 'io.micronaut:micronaut-inject-java'
	
	/**/
	testAnnotationProcessor("io.micronaut.serde:micronaut-serde-processor")
	
	//*/
	testAnnotationProcessor("io.micronaut.data:micronaut-data-processor")
	testAnnotationProcessor("io.micronaut.validation:micronaut-validation-processor")
	
	testAnnotationProcessor("io.micronaut:micronaut-http-validation")
	testAnnotationProcessor("io.micronaut.openapi:micronaut-openapi")
	testAnnotationProcessor("io.micronaut.security:micronaut-security-annotations")
	testAnnotationProcessor('io.micronaut:micronaut-graal')
	/**/
	
	
	testImplementation (platform("org.junit:junit-bom"))
	testImplementation("org.junit.jupiter:junit-jupiter-api")
	testImplementation("io.micronaut.test:micronaut-test-junit5")
	testImplementation("org.junit.jupiter:junit-jupiter-engine")
	testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
	
	testImplementation('org.mock-server:mockserver-junit-jupiter')
	testImplementation('org.junit.jupiter:junit-jupiter-params')
	
	testImplementation('org.mockito:mockito-core')
	testImplementation('org.mockito:mockito-junit-jupiter')
	testImplementation('org.hamcrest:hamcrest')
	testImplementation('org.awaitility:awaitility')
	testImplementation('io.projectreactor:reactor-test')
	
	// testImplementation(platform("org.testcontainers:testcontainers-bom"))
	
	implementation("jakarta.persistence:jakarta.persistence-api")

	runtimeOnly("org.yaml:snakeyaml")
}

java {
	sourceCompatibility = JavaVersion.toVersion("17")
	targetCompatibility = JavaVersion.toVersion("17")
}

final Set<String> jacocoExcludes = [
	'**/Application.class',
	'services/k_int/**/*',
	'**/model/**/*',	
	// Ingest happens at a different client level, so safely exclude from report.
	'org/olf/dcb/ingest/sierra/**/*',	'org/olf/dcb/ingest/gokb/**/*']

eclipse {
  factorypath {
  	file {
	  	whenMerged { fp ->
	  	
	  	  final String regex = '^.*\\/([^\\.\\/]+(\\.[^\\.\\/]+)+)\\/([^\\/]+)\\/(\\d+[^\\/]+)\\/.*$'
	  	  final String subst = '$1:$3:$4';
	  	
				// Change the enties
				List entries = fp.getEntries().sort { s1, s2 ->
				  final String sub1 = s1.canonicalPath.replaceAll( regex, subst )
				  final String sub2 = s2.canonicalPath.replaceAll( regex, subst )
				
					int val1 = oderedAnnotationDeps.get( sub1 ) ?: Integer.MAX_VALUE
					int val2 = oderedAnnotationDeps.get( sub2 ) ?: Integer.MAX_VALUE
					
					val1 <=> val2
				}				
				
				fp.getEntries().each { fpent ->
					println fpent
				}
			}
		}
  }
}
