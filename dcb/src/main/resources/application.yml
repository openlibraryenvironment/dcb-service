micronaut:
  config:
    bootstrap: true
  server:
    cors:
      enabled: true
  application:
    name: dcb
  router:
    static-resources:
      swagger:
        enabled: true
        paths: classpath:META-INF/swagger
        mapping: /openapi/**
      swagger-ui:
        enabled: true
        paths: classpath:META-INF/swagger/views/swagger-ui
        mapping: /openapi/ui/**
      redoc:
        paths: classpath:META-INF/swagger/views/redoc
        mapping: /openapi/redoc/**
  data:
    pageable:
      max-page-size: 2500

  security:
    authentication: idtoken
    token:
      jwt:
        enabled: true
        signatures.jwks.keycloak:
          url: ${KEYCLOAK_CERT_URL:""}
          
    endpoints:
      login:
        enabled: false

    intercept-url-map:
      - pattern: "/openapi/**"
        access:
          - isAnonymous()
      # - pattern: "/graphiql/**"
      #   access:
      #     - isAnonymous()
      - pattern: "/graphql/**"
        access:
          - isAuthenticated()
  http:
    client:
      read-timeout: PT1M
      max-content-length: 20971520
      # Without this, http connections can silently expire but the closed connection will not be
      # discovered until we try to make a request. This was causing random failures talking to ES
      connect-ttl: PT30S
      
      pool:
        enabled: true
        max-concurrent-requests-per-http2-connection: 200
        
      
  metrics:
    enabled: true
    export:
      prometheus:
        enabled: true
        step: PT1M
        descriptions: true
      jmx:
        enabled: true
      cloudwatch:
        # MICRONAUT_METRICS_EXPORT_CLOUDWATCH_ENABLED=true
        enabled: false
        namespace: dcb

endpoints:
  prometheus:
    sensitive: true
  health:
    enabled: true
    sensitive: false # non-secured endpoint
    details-visible: ANONYMOUS # show details for everyone
    ingest:
      enabled: true
  info:
    enabled: true
    sensitive: false

info:
  harvest:
    interval: ${dcb.ingest.interval:1h}
  tracking:
    interval: ${dcb.tracking.interval:5m}
  env:
    code: ${dcb.env.code:Unknown - set DCB_ENV_CODE}
    description: ${dcb.env.description:Unknown - set DCB_ENV_DESCRIPTION}
  circulation:
    tracking-profile: ${dcb.circulation.tracking-profile:}
flyway:
  enabled: true
  datasources:
    default:
      enabled: true
      out-of-order: true
      # locations:
      #   - classpath:db/migrations
      # default-schema: r2dbc-poc
      # url: ${DB_URL:`r2dbc:postgresql://localhost:5432/postgres`}
      # username: ${DB_USER:`postgres`}
      # password: ${DB_PASSWORD:`pass`}

db:
  host: localhost
  port: 5432

datasources:
  default:
    enabled: true
    dialect: POSTGRES
    driverClassName: org.postgresql.Driver
    schema-generate: NONE
    db-type: postgresql
    minimumIdle: 0
    maximumPoolSize: 2
    reconnect: true
    #username: "${db.username:}"
    #password: "${db.password:}"

r2dbc:
  datasources:
    default:
      enabled: true
      dialect: POSTGRES
      # https://micronaut-projects.github.io/micronaut-test-resources/latest/guide/
      # Specify db-type so test resources knows what to provision
      # db-type: postgresql
      db-type: postgres
      reconnect: true
      # url: ${DB_URL:`r2dbc:postgresql://localhost:5432/postgres`}
      # username: ${DB_USER:`postgres`}
      # password: ${DB_PASSWORD:`pass`}
      options:
        driver: pool
        protocol: postgres
        poolName: r2dbc
        maxSize: 20
        initialSize: 5
        # maxLifeTime: PT120M
        # maxLifeTime: PT20M
        maxIdleTime: PT240S
        # maxAcquireTime: PT20S
        validationQuery: "SELECT 1"
        validationDepth: REMOTE
      
      # driver: postgresql
      #url: "r2dbc:postgresql://${db.host}:${db.port}/${db.database:}"
      #host: "${db.host:localhost}"
      #username: "${db.username:}"
      #password: "${db.password:}"
      schema-generate: NONE


# elasticsearch.httpHosts: http://localhost:9200,http://127.0.0.2:9200
netty:
  default:
    allocator:
      max-order: 3
  # https://github.com/micronaut-projects/micronaut-core/discussions/5318
  max-initial-line-length: 4096

jackson:
  date-format: "yyyy-MM-dd'T'HH:mm:ssZ"

graphql:
  enabled: true
  # Disable graphiql because we have protected it using a jwt
  graphiql: # enables the /graphiql endpoint to test calls against your graph.
    enabled: false

dcb:
  security:
    internal-endpoints:
      ip-patterns:
        - "127.0.0.1" # Allow IP4 127.0.0.1
        - "0:0:0:0:0:0:0:1" # Allow localhost IP6
  itemresolver:
    code: FirstItem
  shutdown:
    # Wait up to 60s on shutdown for ingest processes to end
    maxwait: 0
