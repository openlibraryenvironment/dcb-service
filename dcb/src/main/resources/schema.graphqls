scalar JSON

type Query {
    agencies(query: String, pageno: Int, pagesize: Int, order: String): AgencyPage!
    hostLms(query: String, pageno:Int, pagesize: Int, order: String): HostLmsPage!
    locations(query: String, pageno:Int, pagesize: Int, order: String): LocationPage!
    patronRequests(query: String, pageno:Int, pagesize: Int, order: String): PatronRequestPage
    supplierRequests(query: String, pageno:Int, pagesize: Int, order: String): SupplierRequestPage!
    agencyGroups(query: String, pageno:Int, pagesize: Int, order: String): AgencyGroupPage!
    instanceClusters(query: String, pageno: Int, pagesize: Int, order: String): ClusterRecordPage!
    sourceBibs(query: String, pageno:Int, pagesize: Int, order: String): BibRecordPage!
    processStates(query: String, pageno:Int, pagesize: Int, order: String): ProcessStatePage!
    audits(query: String, pageno:Int, pagesize: Int, order: String): PatronRequestAuditPage!
    patronIdentities(query: String, pageno:Int, pagesize: Int, order: String): PatronIdentityPage!
}

type Mutation {
    createAgencyGroup(input: AgencyGroupInput): AgencyGroup!
    addAgencyToGroup(input: AddAgencyToGroupCommand): AgencyGroupMember!
}

input AddAgencyToGroupCommand {
        agency: ID!
        group: ID!
}


"""
Graphql does not allow types to be reused as input types as the semantics are different. We create the input types here.
AgencyGroupInput : fields that define a new agency group.
"""
input AgencyGroupInput {
    id: ID
    code: String!
    name: String!
}

type ProcessState {
  id: ID
  context: ID
  processName: String
  processState: String
}

type HostLms {
  id: ID
  code: String
  name: String
  lmsClientClass: String
  clientConfig: JSON
}

"""
An Agency is a legal entity participating in resource sharing - perhaps an institution, or a consortium or some  other service provider, for
example Hathi Trust or internet archive. Agencies are the root object off which branch locations and other domain specific records can hang.
"""
type Agency {
    id: ID
    code: String
    name: String
    authProfile: String
    longitude: Float
    latitude: Float
    hostLms: HostLms
}

"""
An agency group is a collection of Agencies that can be referred to a sa group. Agencies are "Members" of agency groups and properties can be
attached to the membership. Agency groups most often represent consortia. The consortium itself is probably still best modelled as an Agency 
for the purposes of it's interactions with other systems, but for modelling the members of a consortium, agency group is a useful abstracton for
expressing the aggregation of agencies under a single heading
"""
type AgencyGroup {
    id: ID!
    code: String!
    name: String!
    members: [AgencyGroupMember]
}

type AgencyGroupMember {
  id: ID!
  agency: Agency
  group: AgencyGroup
}

type PatronRequest {
  id: ID!
  dateCreated: String
  dateUpdated: String
  patronHostlmsCode: String
  patron: Patron
  requestingIdentity: PatronIdentity
  bibClusterId: ID
  pickupLocationCode: String
  pickupPatronId: String
  pickupItemId: String
  pickupItemType: String
  pickupItemStatus: String
  pickupRequestId: String
  pickupRequestStatus: String
  status: String
  localRequestId: String
  localRequestStatus: String
  localItemId: String
  localItemStatus: String
  localItemType: String
  localBibId: String
  description: String
  errorMessage: String
  activeWorkflow: String
  requesterNote: String
  suppliers: [SupplierRequest]
  audit: [PatronRequestAudit]
}

type PatronRequestAudit {
  id: ID!
  auditDate: String
  briefDescription: String
  fromStatus: String
  toStatus: String
  auditData: JSON
  patronRequest: PatronRequest
}

type SupplierRequest {
  id: ID!
  canonicalItemType: String
  dateCreated: String
  dateUpdated: String
  hostLmsCode: String
  isActive: Boolean
  localItemId: String
  localBibId: String
  localItemBarcode: String
  localItemLocationCode: String
  localItemStatus: String
  localItemType: String
  localId: String
  localStatus: String
  localAgency: String
  patronRequest: PatronRequest
}

type Patron {
  id: ID!
}

type PatronIdentity {
  id: ID!
  localId: String
  homeIdentity: Boolean
  localBarcode: String
  localNames: String
  localPtype: String
  canonicalPtype: String
  localHomeLibraryCode: String
  lastValidated: String
}

type Location {
  id: ID!
  dateCreated: String
  dateUpdated: String
  code: String
  name: String
  type: String
  agency: Agency
  parentLocation: Location
  hostSystem: HostLms
  isPickup: Boolean
  longitude: Float
  latitude: Float
  locationReference: String
}

"""
See: https://micronaut-projects.github.io/micronaut-data/2.4.0/api/io/micronaut/data/model/Page.html
"""
type Pageable {
  number: Int
  offset: Int
}

type AgencyPage {
  content: [Agency]
  totalSize: Int
  pageable: Pageable
}

type AgencyGroupPage {
  content: [AgencyGroup]
  totalSize: Int
  pageable: Pageable
}

type BibRecordPage {
  content: [BibRecord]
  totalSize: Int
  pageable: Pageable
}

type ClusterRecordPage {
  content: [ClusterRecord]
  totalSize: Int
  pageable: Pageable
}

type HostLmsPage {
  content: [HostLms]
  totalSize: Int
  pageable: Pageable
}

type LocationPage {
  content: [Location]
  totalSize: Int
  pageable: Pageable
}

type PatronRequestPage {
  content: [PatronRequest]
  totalSize: Int
  pageable: Pageable
}

type ProcessStatePage {
  content: [ProcessState]
  totalSize: Int
  pageable: Pageable
}

type PatronRequestAuditPage {
  content: [PatronRequestAudit]
  totalSize: Int
  pageable: Pageable
}

type PatronIdentityPage {
  content: [PatronIdentity]
  totalSize: Int
  pageable: Pageable
}

type SupplierRequestPage {
  content: [SupplierRequest]
  totalSize: Int
  pageable: Pageable
}

type ClusterRecord {
  id: ID!
  title: String
  selectedBib: ID
  isDeleted: Boolean
  dateCreated: String
  dateUpdated: String
  members: [BibRecord]
}

type BibRecord {
  id: ID!
  dateCreated: String
  dateUpdated: String
  title: String
  author: String
  placeOfPublication: String
  publisher: String
  dateOfPublication: String
  edition: String
  isLargePrint: Boolean
  clusterReason: String
  typeOfRecord: String
  canonicalMetadata: JSON
  metadataScore: Int
  processVersion: Int
  contributesTo: ClusterRecord
  sourceSystemId: ID
  sourceRecordId: String
  sourceRecord: RawSource
}

type RawSource {
  id: ID!
  hostLmsId: ID!
  remoteId: String
  json: JSON
}
