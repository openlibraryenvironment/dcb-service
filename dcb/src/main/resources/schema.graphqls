type Query {
    hello(name: String): String!
    agencies(query: String): [Agency]!
    patronRequests(query: String): [PatronRequest]!
    supplierRequests(query: String): [SupplierRequest]!
    agencyGroups(query: String): [AgencyGroup]!
    instanceClusters(query: String, pageno: Int, pagesize: Int): ClusterRecordPage!
    sourceBibs(query: String, pageno:Int, pagesize: Int): BibRecordPage!
}

type Mutation {
    createAgencyGroup(input: AgencyGroupInput): AgencyGroup!
    addAgencyToGroup(input: AddAgencyToGroupCommand): AgencyGroupMember!
}

input AddAgencyToGroupCommand {
        agency: ID!
        group: ID!
}


"""
Graphql does not allow types to be reused as input types as the semantics are different. We create the input types here.
AgencyGroupInput : fields that define a new agency group.
"""
input AgencyGroupInput {
    id: ID
    code: String!
    name: String!
}

"""
An Agency is a legal entity participating in resource sharing - perhaps an institution, or a consortium or some  other service provider, for
example Hathi Trust or internet archive. Agencies are the root object off which branch locations and other domain specific records can hang.
"""
type Agency {
    id: ID
    code: String
    name: String
}

"""
An agency group is a collection of Agencies that can be referred to a sa group. Agencies are "Members" of agency groups and properties can be
attached to the membership. Agency groups most often represent consortia. The consortium itself is probably still best modelled as an Agency 
for the purposes of it's interactions with other systems, but for modelling the members of a consortium, agency group is a useful abstracton for
expressing the aggregation of agencies under a single heading
"""
type AgencyGroup {
    id: ID!
    code: String!
    name: String!
    members: [AgencyGroupMember]
}

type AgencyGroupMember {
  id: ID!
  agency: Agency
  group: AgencyGroup
}

type PatronRequest {
  id: ID!
  patronHostlmsCode: String
  patron: Patron
  requestingIdentity: PatronIdentity
  bibClusterId: ID
  pickupLocationCode: String
  pickupPatronId: String
  pickupItemId: String
  pickupItemType: String
  pickupItemStatus: String
  pickupRequestId: String
  pickupRequestStatus: String
  status: String
  localRequestId: String
  localRequestStatus: String
  localItemId: String
  localItemStatus: String
  localItemType: String
  localBibId: String
  description: String
  errorMessage: String
  activeWorkflow: String
}

type SupplierRequest {
  id: ID!
  hostLmsCode: String
}

type Patron {
  id: ID!
}

type PatronIdentity {
  id: ID!
}

"""
See: https://micronaut-projects.github.io/micronaut-data/2.4.0/api/io/micronaut/data/model/Page.html
"""
type Pageable {
  number: Int
  offset: Int
}

type ClusterRecordPage {
  content: [ClusterRecord]
  totalSize: Int
  pageable: Pageable
}

type BibRecordPage {
  content: [BibRecord]
  totalSize: Int
  pageable: Pageable
}

type ClusterRecord {
  id: ID!
  title: String
  selectedBib: ID
  isDeleted: Boolean
  dateCreated: String
  dateUpdated: String
  members: [BibRecord]
}

type BibRecord {
  id: ID!
  dateCreated: String
  dateUpdated: String
  title: String
  author: String
  placeOfPublication: String
  publisher: String
  dateOfPublication: String
  edition: String
  isLargePrint: Boolean
  clusterReason: String
  typeOfRecord: String
  canonicalMetadata: String
  metadataScore: Int
  processVersion: Int
  contributesTo: ClusterRecord
  sourceSystemId: ID
  sourceRecordId: String
  sourceRecord: RawSource
}

type RawSource {
  id: ID!
  hostLmsId: ID!
  remoteId: String
  rawRecord: String
}
