scalar JSON

type Query {
    agencies(query: String, pageno: Int, pagesize: Int, order: String, orderBy: String): AgencyPage!
    hostLms(query: String, pageno:Int, pagesize: Int, order: String, orderBy: String): HostLmsPage!
    locations(query: String, pageno:Int, pagesize: Int, order: String, orderBy: String): LocationPage!
    patronRequests(query: String, pageno:Int, pagesize: Int, order: String, orderBy: String): PatronRequestPage
    supplierRequests(query: String, pageno:Int, pagesize: Int, order: String, orderBy: String): SupplierRequestPage!
    agencyGroups(query: String, pageno:Int, pagesize: Int, order: String, orderBy: String): AgencyGroupPage!
    instanceClusters(query: String, pageno: Int, pagesize: Int, order: String, orderBy: String): ClusterRecordPage!
    sourceBibs(query: String, pageno:Int, pagesize: Int, order: String, orderBy: String): BibRecordPage!
    processStates(query: String, pageno:Int, pagesize: Int, order: String, orderBy: String): ProcessStatePage!
    audits(query: String, pageno:Int, pagesize: Int, order: String, orderBy: String): PatronRequestAuditPage!
    patronIdentities(query: String, pageno:Int, pagesize: Int, order: String, orderBy: String): PatronIdentityPage!
    numericRangeMappings(query: String, pageno:Int, pagesize: Int, order: String, orderBy: String): NumericRangeMappingPage!
    referenceValueMappings(query: String, pageno:Int, pagesize: Int, order: String, orderBy: String): ReferenceValueMappingPage!
		libraries(query: String, pageno: Int, pagesize: Int, order: String, orderBy: String): LibraryPage!
    pickupLocations(forAgency: String): [Location]
		libraryGroups(query: String, pageno:Int, pagesize: Int, order: String, orderBy: String): LibraryGroupPage!
		libraryGroupMembers: [LibraryGroupMember]!
}

type Mutation {
    createAgencyGroup(input: AgencyGroupInput): AgencyGroup!
    addAgencyToGroup(input: AddAgencyToGroupCommand): AgencyGroupMember!
		createConsortium(input: ConsortiumInput): Consortium!
		createLibrary(input: LibraryInput): Library!
		createLibraryGroup(input: LibraryGroupInput): LibraryGroup!
		addLibraryToGroup(input: AddLibraryToGroupCommand): LibraryGroupMember!
}

input AddAgencyToGroupCommand {
        agency: ID!
        group: ID!
}

input AddLibraryToGroupCommand {
	library: ID!
	libraryGroup: ID!
}


"""
Graphql does not allow types to be reused as input types as the semantics are different. We create the input types here.
AgencyGroupInput : fields that define a new agency group.
"""
input AgencyGroupInput {
    id: ID
    code: String!
    name: String!
}

input ConsortiumInput {
	id: ID
	name: String!
	groupName: String!
}

input LibraryInput {
	id: ID
	agencyCode: String!
	fullName: String!
	shortName: String!
	abbreviatedName: String!
	address: String!
	training: Boolean!
	type: String!
	contacts: [PersonInput]!
	longitude: Float
	latitude: Float
	patronWebsite: String
	discoverySystem: String
	hostLmsConfiguration: String
	supportHours: String
	backupDowntimeSchedule: String
}

input LibraryGroupInput {
	id: ID
	code: String!
	name: String!
	type: String!
}

input PersonInput {
	id: ID
	firstName: String!
	lastName: String!
	role: String!
	isPrimaryContact: Boolean!
	email: String!
}

type ProcessState {
  id: ID
  context: ID
  processName: String
  processState: JSON
}

type HostLms {
  id: ID
  code: String
  name: String
  lmsClientClass: String
  clientConfig: JSON
}

"""
An Agency is a legal entity participating in resource sharing - perhaps an institution, or a consortium or some  other service provider, for
example Hathi Trust or internet archive. Agencies are the root object off which branch locations and other domain specific records can hang.
"""
type Agency {
    id: ID
    code: String
    name: String
    authProfile: String
    longitude: Float
    latitude: Float
    hostLms: HostLms
    locations: [Location]
}

"""
An agency group is a collection of Agencies that can be referred to as a group. Agencies are "Members" of agency groups and properties can be
attached to the membership. Agency groups most often represent consortia. The consortium itself is probably still best modelled as an Agency 
for the purposes of it's interactions with other systems, but for modelling the members of a consortium, agency group is a useful abstracton for
expressing the aggregation of agencies under a single heading
"""
type AgencyGroup {
    id: ID!
    code: String!
    name: String!
    members: [AgencyGroupMember]
}

type AgencyGroupMember {
  id: ID!
  agency: Agency
  group: AgencyGroup
}

type PatronRequest {
  id: ID!
  dateCreated: String
  dateUpdated: String
  patronHostlmsCode: String
  patron: Patron
  requestingIdentity: PatronIdentity
  bibClusterId: ID
  pickupLocationCode: String
  pickupPatronId: String
  pickupItemId: String
  pickupItemType: String
  pickupItemStatus: String
  pickupRequestId: String
  pickupRequestStatus: String
  status: String
  localRequestId: String
  localRequestStatus: String
  localItemId: String
  localItemStatus: String
  localItemType: String
  localBibId: String
  description: String
	nextScheduledPoll: String
	errorMessage: String
  activeWorkflow: String
  requesterNote: String
  suppliers: [SupplierRequest]
  audit: [PatronRequestAudit]
  clusterRecord: ClusterRecord
}

type PatronRequestAudit {
  id: ID!
  auditDate: String
  briefDescription: String
  fromStatus: String
  toStatus: String
  auditData: JSON
  patronRequest: PatronRequest
}

type SupplierRequest {
  id: ID!
  canonicalItemType: String
  dateCreated: String
  dateUpdated: String
  hostLmsCode: String
  isActive: Boolean
  localItemId: String
  localBibId: String
  localItemBarcode: String
  localItemLocationCode: String
  localItemStatus: String
  localItemType: String
  localId: String
  localStatus: String
  localAgency: String
  patronRequest: PatronRequest
  virtualPatron: PatronIdentity
}

type Patron {
  id: ID!
}

type PatronIdentity {
  id: ID!
  localId: String
  homeIdentity: Boolean
  localBarcode: String
  localNames: String
  localPtype: String
  canonicalPtype: String
  localHomeLibraryCode: String
  lastValidated: String
}

type Location {
  id: ID!
  dateCreated: String
  dateUpdated: String
  code: String
  name: String
  type: String
  agency: Agency
  parentLocation: Location
  hostSystem: HostLms
  isPickup: Boolean
  longitude: Float
  latitude: Float
  locationReference: String
  deliveryStops: String
  printLabel: String
  localId: String
}

type Library {
	id: ID!
	agencyCode: String
	fullName: String
	shortName: String
	abbreviatedName: String
	training: Boolean
	backupDowntimeSchedule: String
	supportHours: String
	discoverySystem: String
	patronWebsite: String
	hostLmsConfiguration: String
	longitude: Float
	latitude: Float
	address: String
	agency: Agency
	type: String
	contacts: [Person]
	secondHostLms: HostLms
	membership: [LibraryGroupMember]
}

type LibraryContact {
	id: ID
	library: Library
	person: Person
}

type LibraryGroup {
	id: ID!
	name: String!
	code: String!
	type: String!
	members: [LibraryGroupMember]
	consortium: Consortium
}

type LibraryGroupMember {
	id: ID!
	library: Library
	libraryGroup: LibraryGroup
}

type Person {
	id: ID
	firstName: String
	lastName: String
	role: String
	isPrimaryContact: Boolean
	email: String
}

type Consortium {
	id: ID!
	name: String
	libraryGroup: LibraryGroup!
}

type ConsortiumMember {
	id: ID!
	library: Library
	consortium: Consortium
}
"""
See: https://micronaut-projects.github.io/micronaut-data/2.4.0/api/io/micronaut/data/model/Page.html
"""
type Pageable {
  number: Int
  offset: Int
}

type AgencyPage {
  content: [Agency]
  totalSize: Int
  pageable: Pageable
}

type AgencyGroupPage {
  content: [AgencyGroup]
  totalSize: Int
  pageable: Pageable
}

type BibRecordPage {
  content: [BibRecord]
  totalSize: Int
  pageable: Pageable
}

type ClusterRecordPage {
  content: [ClusterRecord]
  totalSize: Int
  pageable: Pageable
}

type ConsortiumPage {
	content: [Consortium]
	totalSize: Int
	pageable: Pageable
}

type LibraryGroupPage {
	content: [LibraryGroup]
	totalSize: Int
	pageable: Pageable
}

type HostLmsPage {
  content: [HostLms]
  totalSize: Int
  pageable: Pageable
}

type LocationPage {
  content: [Location]
  totalSize: Int
  pageable: Pageable
}

type LibraryPage {
	content: [Library]
	totalSize: Int
	pageable: Pageable
}


type PatronRequestPage {
  content: [PatronRequest]
  totalSize: Int
  pageable: Pageable
}

type ProcessStatePage {
  content: [ProcessState]
  totalSize: Int
  pageable: Pageable
}

type PatronRequestAuditPage {
  content: [PatronRequestAudit]
  totalSize: Int
  pageable: Pageable
}

type PatronIdentityPage {
  content: [PatronIdentity]
  totalSize: Int
  pageable: Pageable
}

type SupplierRequestPage {
  content: [SupplierRequest]
  totalSize: Int
  pageable: Pageable
}

type NumericRangeMappingPage {
  content: [NumericRangeMapping]
  totalSize: Int
  pageable: Pageable
}

type ReferenceValueMappingPage {
  content: [ReferenceValueMapping]
  totalSize: Int
  pageable: Pageable
}

type ReferenceValueMapping {
  id: ID!
  fromCategory: String
  fromContext: String
  fromValue: String
  toCategory: String
  toContext: String
  toValue: String
  reciprocal: Boolean
  label: String
  lastImported: String
  deleted: Boolean
}

type NumericRangeMapping {
  id: ID!
  context: String
  domain: String
  lowerBound: Int
  upperBound: Int
  targetContext: String
  mappedValue: String
}

type ClusterRecord {
  id: ID!
  title: String
  selectedBib: ID
  isDeleted: Boolean
  dateCreated: String
  dateUpdated: String
  members: [BibRecord]
}

type BibRecord {
  id: ID!
  dateCreated: String
  dateUpdated: String
  title: String
  author: String
  placeOfPublication: String
  publisher: String
  dateOfPublication: String
  edition: String
  isLargePrint: Boolean
  clusterReason: String
  typeOfRecord: String
  canonicalMetadata: JSON
  metadataScore: Int
  processVersion: Int
  contributesTo: ClusterRecord
  sourceSystemId: ID
  sourceRecordId: String
  sourceRecord: RawSource
}

type RawSource {
  id: ID!
  hostLmsId: ID!
  remoteId: String
  json: JSON
}
